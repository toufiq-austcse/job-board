// Code generated by ent, DO NOT EDIT.

package jobtaxonomy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldUpdatedAt, v))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldJobID, v))
}

// TaxonomyID applies equality check predicate on the "taxonomy_id" field. It's identical to TaxonomyIDEQ.
func TaxonomyID(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldTaxonomyID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLTE(FieldUpdatedAt, v))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNotIn(FieldJobID, vs...))
}

// JobIDGT applies the GT predicate on the "job_id" field.
func JobIDGT(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGT(FieldJobID, v))
}

// JobIDGTE applies the GTE predicate on the "job_id" field.
func JobIDGTE(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGTE(FieldJobID, v))
}

// JobIDLT applies the LT predicate on the "job_id" field.
func JobIDLT(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLT(FieldJobID, v))
}

// JobIDLTE applies the LTE predicate on the "job_id" field.
func JobIDLTE(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLTE(FieldJobID, v))
}

// TaxonomyIDEQ applies the EQ predicate on the "taxonomy_id" field.
func TaxonomyIDEQ(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldEQ(FieldTaxonomyID, v))
}

// TaxonomyIDNEQ applies the NEQ predicate on the "taxonomy_id" field.
func TaxonomyIDNEQ(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNEQ(FieldTaxonomyID, v))
}

// TaxonomyIDIn applies the In predicate on the "taxonomy_id" field.
func TaxonomyIDIn(vs ...int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldIn(FieldTaxonomyID, vs...))
}

// TaxonomyIDNotIn applies the NotIn predicate on the "taxonomy_id" field.
func TaxonomyIDNotIn(vs ...int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldNotIn(FieldTaxonomyID, vs...))
}

// TaxonomyIDGT applies the GT predicate on the "taxonomy_id" field.
func TaxonomyIDGT(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGT(FieldTaxonomyID, v))
}

// TaxonomyIDGTE applies the GTE predicate on the "taxonomy_id" field.
func TaxonomyIDGTE(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldGTE(FieldTaxonomyID, v))
}

// TaxonomyIDLT applies the LT predicate on the "taxonomy_id" field.
func TaxonomyIDLT(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLT(FieldTaxonomyID, v))
}

// TaxonomyIDLTE applies the LTE predicate on the "taxonomy_id" field.
func TaxonomyIDLTE(v int) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(sql.FieldLTE(FieldTaxonomyID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobTaxonomy) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobTaxonomy) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobTaxonomy) predicate.JobTaxonomy {
	return predicate.JobTaxonomy(func(s *sql.Selector) {
		p(s.Not())
	})
}
