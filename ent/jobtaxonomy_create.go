// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/jobtaxonomy"
)

// JobTaxonomyCreate is the builder for creating a JobTaxonomy entity.
type JobTaxonomyCreate struct {
	config
	mutation *JobTaxonomyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (jtc *JobTaxonomyCreate) SetCreatedAt(t time.Time) *JobTaxonomyCreate {
	jtc.mutation.SetCreatedAt(t)
	return jtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jtc *JobTaxonomyCreate) SetNillableCreatedAt(t *time.Time) *JobTaxonomyCreate {
	if t != nil {
		jtc.SetCreatedAt(*t)
	}
	return jtc
}

// SetUpdatedAt sets the "updated_at" field.
func (jtc *JobTaxonomyCreate) SetUpdatedAt(t time.Time) *JobTaxonomyCreate {
	jtc.mutation.SetUpdatedAt(t)
	return jtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jtc *JobTaxonomyCreate) SetNillableUpdatedAt(t *time.Time) *JobTaxonomyCreate {
	if t != nil {
		jtc.SetUpdatedAt(*t)
	}
	return jtc
}

// SetJobID sets the "job_id" field.
func (jtc *JobTaxonomyCreate) SetJobID(i int) *JobTaxonomyCreate {
	jtc.mutation.SetJobID(i)
	return jtc
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (jtc *JobTaxonomyCreate) SetTaxonomyID(i int) *JobTaxonomyCreate {
	jtc.mutation.SetTaxonomyID(i)
	return jtc
}

// Mutation returns the JobTaxonomyMutation object of the builder.
func (jtc *JobTaxonomyCreate) Mutation() *JobTaxonomyMutation {
	return jtc.mutation
}

// Save creates the JobTaxonomy in the database.
func (jtc *JobTaxonomyCreate) Save(ctx context.Context) (*JobTaxonomy, error) {
	jtc.defaults()
	return withHooks(ctx, jtc.sqlSave, jtc.mutation, jtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jtc *JobTaxonomyCreate) SaveX(ctx context.Context) *JobTaxonomy {
	v, err := jtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jtc *JobTaxonomyCreate) Exec(ctx context.Context) error {
	_, err := jtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtc *JobTaxonomyCreate) ExecX(ctx context.Context) {
	if err := jtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtc *JobTaxonomyCreate) defaults() {
	if _, ok := jtc.mutation.CreatedAt(); !ok {
		v := jobtaxonomy.DefaultCreatedAt()
		jtc.mutation.SetCreatedAt(v)
	}
	if _, ok := jtc.mutation.UpdatedAt(); !ok {
		v := jobtaxonomy.DefaultUpdatedAt()
		jtc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jtc *JobTaxonomyCreate) check() error {
	if _, ok := jtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobTaxonomy.created_at"`)}
	}
	if _, ok := jtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "JobTaxonomy.updated_at"`)}
	}
	if _, ok := jtc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`ent: missing required field "JobTaxonomy.job_id"`)}
	}
	if _, ok := jtc.mutation.TaxonomyID(); !ok {
		return &ValidationError{Name: "taxonomy_id", err: errors.New(`ent: missing required field "JobTaxonomy.taxonomy_id"`)}
	}
	return nil
}

func (jtc *JobTaxonomyCreate) sqlSave(ctx context.Context) (*JobTaxonomy, error) {
	if err := jtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jtc.mutation.id = &_node.ID
	jtc.mutation.done = true
	return _node, nil
}

func (jtc *JobTaxonomyCreate) createSpec() (*JobTaxonomy, *sqlgraph.CreateSpec) {
	var (
		_node = &JobTaxonomy{config: jtc.config}
		_spec = sqlgraph.NewCreateSpec(jobtaxonomy.Table, sqlgraph.NewFieldSpec(jobtaxonomy.FieldID, field.TypeInt))
	)
	if value, ok := jtc.mutation.CreatedAt(); ok {
		_spec.SetField(jobtaxonomy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jtc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtaxonomy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jtc.mutation.JobID(); ok {
		_spec.SetField(jobtaxonomy.FieldJobID, field.TypeInt, value)
		_node.JobID = value
	}
	if value, ok := jtc.mutation.TaxonomyID(); ok {
		_spec.SetField(jobtaxonomy.FieldTaxonomyID, field.TypeInt, value)
		_node.TaxonomyID = value
	}
	return _node, _spec
}

// JobTaxonomyCreateBulk is the builder for creating many JobTaxonomy entities in bulk.
type JobTaxonomyCreateBulk struct {
	config
	builders []*JobTaxonomyCreate
}

// Save creates the JobTaxonomy entities in the database.
func (jtcb *JobTaxonomyCreateBulk) Save(ctx context.Context) ([]*JobTaxonomy, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jtcb.builders))
	nodes := make([]*JobTaxonomy, len(jtcb.builders))
	mutators := make([]Mutator, len(jtcb.builders))
	for i := range jtcb.builders {
		func(i int, root context.Context) {
			builder := jtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobTaxonomyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jtcb *JobTaxonomyCreateBulk) SaveX(ctx context.Context) []*JobTaxonomy {
	v, err := jtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jtcb *JobTaxonomyCreateBulk) Exec(ctx context.Context) error {
	_, err := jtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtcb *JobTaxonomyCreateBulk) ExecX(ctx context.Context) {
	if err := jtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
