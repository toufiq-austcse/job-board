// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/company"
)

// CompanyCreate is the builder for creating a Company entity.
type CompanyCreate struct {
	config
	mutation *CompanyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *CompanyCreate) SetCreatedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableCreatedAt(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CompanyCreate) SetUpdatedAt(t time.Time) *CompanyCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableUpdatedAt(t *time.Time) *CompanyCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CompanyCreate) SetName(s string) *CompanyCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetLocation sets the "location" field.
func (cc *CompanyCreate) SetLocation(s string) *CompanyCreate {
	cc.mutation.SetLocation(s)
	return cc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableLocation(s *string) *CompanyCreate {
	if s != nil {
		cc.SetLocation(*s)
	}
	return cc
}

// SetLogoURL sets the "logo_url" field.
func (cc *CompanyCreate) SetLogoURL(s string) *CompanyCreate {
	cc.mutation.SetLogoURL(s)
	return cc
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableLogoURL(s *string) *CompanyCreate {
	if s != nil {
		cc.SetLogoURL(*s)
	}
	return cc
}

// SetWebsiteURL sets the "website_url" field.
func (cc *CompanyCreate) SetWebsiteURL(s string) *CompanyCreate {
	cc.mutation.SetWebsiteURL(s)
	return cc
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableWebsiteURL(s *string) *CompanyCreate {
	if s != nil {
		cc.SetWebsiteURL(*s)
	}
	return cc
}

// SetEmail sets the "email" field.
func (cc *CompanyCreate) SetEmail(s string) *CompanyCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetPassword sets the "password" field.
func (cc *CompanyCreate) SetPassword(s string) *CompanyCreate {
	cc.mutation.SetPassword(s)
	return cc
}

// SetSize sets the "size" field.
func (cc *CompanyCreate) SetSize(s string) *CompanyCreate {
	cc.mutation.SetSize(s)
	return cc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableSize(s *string) *CompanyCreate {
	if s != nil {
		cc.SetSize(*s)
	}
	return cc
}

// SetIndustry sets the "industry" field.
func (cc *CompanyCreate) SetIndustry(s string) *CompanyCreate {
	cc.mutation.SetIndustry(s)
	return cc
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableIndustry(s *string) *CompanyCreate {
	if s != nil {
		cc.SetIndustry(*s)
	}
	return cc
}

// SetEstablished sets the "established" field.
func (cc *CompanyCreate) SetEstablished(s string) *CompanyCreate {
	cc.mutation.SetEstablished(s)
	return cc
}

// SetNillableEstablished sets the "established" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableEstablished(s *string) *CompanyCreate {
	if s != nil {
		cc.SetEstablished(*s)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *CompanyCreate) SetDescription(s string) *CompanyCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableDescription(s *string) *CompanyCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetCultureDescription sets the "culture_description" field.
func (cc *CompanyCreate) SetCultureDescription(s string) *CompanyCreate {
	cc.mutation.SetCultureDescription(s)
	return cc
}

// SetNillableCultureDescription sets the "culture_description" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableCultureDescription(s *string) *CompanyCreate {
	if s != nil {
		cc.SetCultureDescription(*s)
	}
	return cc
}

// SetHiringDescription sets the "hiring_description" field.
func (cc *CompanyCreate) SetHiringDescription(s string) *CompanyCreate {
	cc.mutation.SetHiringDescription(s)
	return cc
}

// SetNillableHiringDescription sets the "hiring_description" field if the given value is not nil.
func (cc *CompanyCreate) SetNillableHiringDescription(s *string) *CompanyCreate {
	if s != nil {
		cc.SetHiringDescription(*s)
	}
	return cc
}

// Mutation returns the CompanyMutation object of the builder.
func (cc *CompanyCreate) Mutation() *CompanyMutation {
	return cc.mutation
}

// Save creates the Company in the database.
func (cc *CompanyCreate) Save(ctx context.Context) (*Company, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompanyCreate) SaveX(ctx context.Context) *Company {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompanyCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompanyCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompanyCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if company.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized company.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := company.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if company.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized company.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := company.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompanyCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Company.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Company.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Company.name"`)}
	}
	if _, ok := cc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Company.email"`)}
	}
	if _, ok := cc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Company.password"`)}
	}
	return nil
}

func (cc *CompanyCreate) sqlSave(ctx context.Context) (*Company, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompanyCreate) createSpec() (*Company, *sqlgraph.CreateSpec) {
	var (
		_node = &Company{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(company.Table, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(company.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Location(); ok {
		_spec.SetField(company.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := cc.mutation.LogoURL(); ok {
		_spec.SetField(company.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := cc.mutation.WebsiteURL(); ok {
		_spec.SetField(company.FieldWebsiteURL, field.TypeString, value)
		_node.WebsiteURL = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cc.mutation.Password(); ok {
		_spec.SetField(company.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := cc.mutation.Size(); ok {
		_spec.SetField(company.FieldSize, field.TypeString, value)
		_node.Size = value
	}
	if value, ok := cc.mutation.Industry(); ok {
		_spec.SetField(company.FieldIndustry, field.TypeString, value)
		_node.Industry = value
	}
	if value, ok := cc.mutation.Established(); ok {
		_spec.SetField(company.FieldEstablished, field.TypeString, value)
		_node.Established = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.CultureDescription(); ok {
		_spec.SetField(company.FieldCultureDescription, field.TypeString, value)
		_node.CultureDescription = value
	}
	if value, ok := cc.mutation.HiringDescription(); ok {
		_spec.SetField(company.FieldHiringDescription, field.TypeString, value)
		_node.HiringDescription = value
	}
	return _node, _spec
}

// CompanyCreateBulk is the builder for creating many Company entities in bulk.
type CompanyCreateBulk struct {
	config
	builders []*CompanyCreate
}

// Save creates the Company entities in the database.
func (ccb *CompanyCreateBulk) Save(ctx context.Context) ([]*Company, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Company, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompanyCreateBulk) SaveX(ctx context.Context) []*Company {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompanyCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompanyCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
