// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/jobtaxonomy"
)

// JobTaxonomy is the model entity for the JobTaxonomy schema.
type JobTaxonomy struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// JobID holds the value of the "job_id" field.
	JobID int `json:"job_id,omitempty"`
	// TaxonomyID holds the value of the "taxonomy_id" field.
	TaxonomyID   int `json:"taxonomy_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobTaxonomy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobtaxonomy.FieldID, jobtaxonomy.FieldJobID, jobtaxonomy.FieldTaxonomyID:
			values[i] = new(sql.NullInt64)
		case jobtaxonomy.FieldCreatedAt, jobtaxonomy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobTaxonomy fields.
func (jt *JobTaxonomy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobtaxonomy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jt.ID = int(value.Int64)
		case jobtaxonomy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jt.CreatedAt = value.Time
			}
		case jobtaxonomy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jt.UpdatedAt = value.Time
			}
		case jobtaxonomy.FieldJobID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				jt.JobID = int(value.Int64)
			}
		case jobtaxonomy.FieldTaxonomyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field taxonomy_id", values[i])
			} else if value.Valid {
				jt.TaxonomyID = int(value.Int64)
			}
		default:
			jt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobTaxonomy.
// This includes values selected through modifiers, order, etc.
func (jt *JobTaxonomy) Value(name string) (ent.Value, error) {
	return jt.selectValues.Get(name)
}

// Update returns a builder for updating this JobTaxonomy.
// Note that you need to call JobTaxonomy.Unwrap() before calling this method if this JobTaxonomy
// was returned from a transaction, and the transaction was committed or rolled back.
func (jt *JobTaxonomy) Update() *JobTaxonomyUpdateOne {
	return NewJobTaxonomyClient(jt.config).UpdateOne(jt)
}

// Unwrap unwraps the JobTaxonomy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jt *JobTaxonomy) Unwrap() *JobTaxonomy {
	_tx, ok := jt.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobTaxonomy is not a transactional entity")
	}
	jt.config.driver = _tx.drv
	return jt
}

// String implements the fmt.Stringer.
func (jt *JobTaxonomy) String() string {
	var builder strings.Builder
	builder.WriteString("JobTaxonomy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(jt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(fmt.Sprintf("%v", jt.JobID))
	builder.WriteString(", ")
	builder.WriteString("taxonomy_id=")
	builder.WriteString(fmt.Sprintf("%v", jt.TaxonomyID))
	builder.WriteByte(')')
	return builder.String()
}

// JobTaxonomies is a parsable slice of JobTaxonomy.
type JobTaxonomies []*JobTaxonomy
