// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/jobtaxonomy"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/predicate"
)

// JobTaxonomyUpdate is the builder for updating JobTaxonomy entities.
type JobTaxonomyUpdate struct {
	config
	hooks    []Hook
	mutation *JobTaxonomyMutation
}

// Where appends a list predicates to the JobTaxonomyUpdate builder.
func (jtu *JobTaxonomyUpdate) Where(ps ...predicate.JobTaxonomy) *JobTaxonomyUpdate {
	jtu.mutation.Where(ps...)
	return jtu
}

// SetUpdatedAt sets the "updated_at" field.
func (jtu *JobTaxonomyUpdate) SetUpdatedAt(t time.Time) *JobTaxonomyUpdate {
	jtu.mutation.SetUpdatedAt(t)
	return jtu
}

// SetJobID sets the "job_id" field.
func (jtu *JobTaxonomyUpdate) SetJobID(i int) *JobTaxonomyUpdate {
	jtu.mutation.ResetJobID()
	jtu.mutation.SetJobID(i)
	return jtu
}

// AddJobID adds i to the "job_id" field.
func (jtu *JobTaxonomyUpdate) AddJobID(i int) *JobTaxonomyUpdate {
	jtu.mutation.AddJobID(i)
	return jtu
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (jtu *JobTaxonomyUpdate) SetTaxonomyID(i int) *JobTaxonomyUpdate {
	jtu.mutation.ResetTaxonomyID()
	jtu.mutation.SetTaxonomyID(i)
	return jtu
}

// AddTaxonomyID adds i to the "taxonomy_id" field.
func (jtu *JobTaxonomyUpdate) AddTaxonomyID(i int) *JobTaxonomyUpdate {
	jtu.mutation.AddTaxonomyID(i)
	return jtu
}

// Mutation returns the JobTaxonomyMutation object of the builder.
func (jtu *JobTaxonomyUpdate) Mutation() *JobTaxonomyMutation {
	return jtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jtu *JobTaxonomyUpdate) Save(ctx context.Context) (int, error) {
	jtu.defaults()
	return withHooks(ctx, jtu.sqlSave, jtu.mutation, jtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtu *JobTaxonomyUpdate) SaveX(ctx context.Context) int {
	affected, err := jtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jtu *JobTaxonomyUpdate) Exec(ctx context.Context) error {
	_, err := jtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtu *JobTaxonomyUpdate) ExecX(ctx context.Context) {
	if err := jtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtu *JobTaxonomyUpdate) defaults() {
	if _, ok := jtu.mutation.UpdatedAt(); !ok {
		v := jobtaxonomy.UpdateDefaultUpdatedAt()
		jtu.mutation.SetUpdatedAt(v)
	}
}

func (jtu *JobTaxonomyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobtaxonomy.Table, jobtaxonomy.Columns, sqlgraph.NewFieldSpec(jobtaxonomy.FieldID, field.TypeInt))
	if ps := jtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtu.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtaxonomy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jtu.mutation.JobID(); ok {
		_spec.SetField(jobtaxonomy.FieldJobID, field.TypeInt, value)
	}
	if value, ok := jtu.mutation.AddedJobID(); ok {
		_spec.AddField(jobtaxonomy.FieldJobID, field.TypeInt, value)
	}
	if value, ok := jtu.mutation.TaxonomyID(); ok {
		_spec.SetField(jobtaxonomy.FieldTaxonomyID, field.TypeInt, value)
	}
	if value, ok := jtu.mutation.AddedTaxonomyID(); ok {
		_spec.AddField(jobtaxonomy.FieldTaxonomyID, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtaxonomy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jtu.mutation.done = true
	return n, nil
}

// JobTaxonomyUpdateOne is the builder for updating a single JobTaxonomy entity.
type JobTaxonomyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobTaxonomyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (jtuo *JobTaxonomyUpdateOne) SetUpdatedAt(t time.Time) *JobTaxonomyUpdateOne {
	jtuo.mutation.SetUpdatedAt(t)
	return jtuo
}

// SetJobID sets the "job_id" field.
func (jtuo *JobTaxonomyUpdateOne) SetJobID(i int) *JobTaxonomyUpdateOne {
	jtuo.mutation.ResetJobID()
	jtuo.mutation.SetJobID(i)
	return jtuo
}

// AddJobID adds i to the "job_id" field.
func (jtuo *JobTaxonomyUpdateOne) AddJobID(i int) *JobTaxonomyUpdateOne {
	jtuo.mutation.AddJobID(i)
	return jtuo
}

// SetTaxonomyID sets the "taxonomy_id" field.
func (jtuo *JobTaxonomyUpdateOne) SetTaxonomyID(i int) *JobTaxonomyUpdateOne {
	jtuo.mutation.ResetTaxonomyID()
	jtuo.mutation.SetTaxonomyID(i)
	return jtuo
}

// AddTaxonomyID adds i to the "taxonomy_id" field.
func (jtuo *JobTaxonomyUpdateOne) AddTaxonomyID(i int) *JobTaxonomyUpdateOne {
	jtuo.mutation.AddTaxonomyID(i)
	return jtuo
}

// Mutation returns the JobTaxonomyMutation object of the builder.
func (jtuo *JobTaxonomyUpdateOne) Mutation() *JobTaxonomyMutation {
	return jtuo.mutation
}

// Where appends a list predicates to the JobTaxonomyUpdate builder.
func (jtuo *JobTaxonomyUpdateOne) Where(ps ...predicate.JobTaxonomy) *JobTaxonomyUpdateOne {
	jtuo.mutation.Where(ps...)
	return jtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jtuo *JobTaxonomyUpdateOne) Select(field string, fields ...string) *JobTaxonomyUpdateOne {
	jtuo.fields = append([]string{field}, fields...)
	return jtuo
}

// Save executes the query and returns the updated JobTaxonomy entity.
func (jtuo *JobTaxonomyUpdateOne) Save(ctx context.Context) (*JobTaxonomy, error) {
	jtuo.defaults()
	return withHooks(ctx, jtuo.sqlSave, jtuo.mutation, jtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jtuo *JobTaxonomyUpdateOne) SaveX(ctx context.Context) *JobTaxonomy {
	node, err := jtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jtuo *JobTaxonomyUpdateOne) Exec(ctx context.Context) error {
	_, err := jtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jtuo *JobTaxonomyUpdateOne) ExecX(ctx context.Context) {
	if err := jtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jtuo *JobTaxonomyUpdateOne) defaults() {
	if _, ok := jtuo.mutation.UpdatedAt(); !ok {
		v := jobtaxonomy.UpdateDefaultUpdatedAt()
		jtuo.mutation.SetUpdatedAt(v)
	}
}

func (jtuo *JobTaxonomyUpdateOne) sqlSave(ctx context.Context) (_node *JobTaxonomy, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobtaxonomy.Table, jobtaxonomy.Columns, sqlgraph.NewFieldSpec(jobtaxonomy.FieldID, field.TypeInt))
	id, ok := jtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobTaxonomy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobtaxonomy.FieldID)
		for _, f := range fields {
			if !jobtaxonomy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobtaxonomy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtaxonomy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := jtuo.mutation.JobID(); ok {
		_spec.SetField(jobtaxonomy.FieldJobID, field.TypeInt, value)
	}
	if value, ok := jtuo.mutation.AddedJobID(); ok {
		_spec.AddField(jobtaxonomy.FieldJobID, field.TypeInt, value)
	}
	if value, ok := jtuo.mutation.TaxonomyID(); ok {
		_spec.SetField(jobtaxonomy.FieldTaxonomyID, field.TypeInt, value)
	}
	if value, ok := jtuo.mutation.AddedTaxonomyID(); ok {
		_spec.AddField(jobtaxonomy.FieldTaxonomyID, field.TypeInt, value)
	}
	_node = &JobTaxonomy{config: jtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtaxonomy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jtuo.mutation.done = true
	return _node, nil
}
