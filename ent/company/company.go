// Code generated by ent, DO NOT EDIT.

package company

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the company type in the database.
	Label = "company"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// FieldWebsiteURL holds the string denoting the website_url field in the database.
	FieldWebsiteURL = "website_url"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldIndustry holds the string denoting the industry field in the database.
	FieldIndustry = "industry"
	// FieldEstablished holds the string denoting the established field in the database.
	FieldEstablished = "established"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCultureDescription holds the string denoting the culture_description field in the database.
	FieldCultureDescription = "culture_description"
	// FieldHiringDescription holds the string denoting the hiring_description field in the database.
	FieldHiringDescription = "hiring_description"
	// Table holds the table name of the company in the database.
	Table = "companies"
)

// Columns holds all SQL columns for company fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldSlug,
	FieldLocation,
	FieldLogoURL,
	FieldWebsiteURL,
	FieldEmail,
	FieldPassword,
	FieldSize,
	FieldIndustry,
	FieldEstablished,
	FieldDescription,
	FieldCultureDescription,
	FieldHiringDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/toufiq-austcse/go-api-boilerplate/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
)

// OrderOption defines the ordering options for the Company queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByWebsiteURL orders the results by the website_url field.
func ByWebsiteURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsiteURL, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByIndustry orders the results by the industry field.
func ByIndustry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndustry, opts...).ToFunc()
}

// ByEstablished orders the results by the established field.
func ByEstablished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstablished, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCultureDescription orders the results by the culture_description field.
func ByCultureDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCultureDescription, opts...).ToFunc()
}

// ByHiringDescription orders the results by the hiring_description field.
func ByHiringDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHiringDescription, opts...).ToFunc()
}
