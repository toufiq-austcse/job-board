// Code generated by ent, DO NOT EDIT.

package company

import (
	"entgo.io/ent/dialect/sql"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLocation, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLogoURL, v))
}

// WebsiteURL applies equality check predicate on the "website_url" field. It's identical to WebsiteURLEQ.
func WebsiteURL(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldWebsiteURL, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEmail, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPassword, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldSize, v))
}

// Industry applies equality check predicate on the "industry" field. It's identical to IndustryEQ.
func Industry(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldIndustry, v))
}

// Established applies equality check predicate on the "established" field. It's identical to EstablishedEQ.
func Established(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEstablished, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDescription, v))
}

// CultureDescription applies equality check predicate on the "culture_description" field. It's identical to CultureDescriptionEQ.
func CultureDescription(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCultureDescription, v))
}

// HiringDescription applies equality check predicate on the "hiring_description" field. It's identical to HiringDescriptionEQ.
func HiringDescription(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldHiringDescription, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldName, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldLocation, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldLogoURL, v))
}

// WebsiteURLEQ applies the EQ predicate on the "website_url" field.
func WebsiteURLEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldWebsiteURL, v))
}

// WebsiteURLNEQ applies the NEQ predicate on the "website_url" field.
func WebsiteURLNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldWebsiteURL, v))
}

// WebsiteURLIn applies the In predicate on the "website_url" field.
func WebsiteURLIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldWebsiteURL, vs...))
}

// WebsiteURLNotIn applies the NotIn predicate on the "website_url" field.
func WebsiteURLNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldWebsiteURL, vs...))
}

// WebsiteURLGT applies the GT predicate on the "website_url" field.
func WebsiteURLGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldWebsiteURL, v))
}

// WebsiteURLGTE applies the GTE predicate on the "website_url" field.
func WebsiteURLGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldWebsiteURL, v))
}

// WebsiteURLLT applies the LT predicate on the "website_url" field.
func WebsiteURLLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldWebsiteURL, v))
}

// WebsiteURLLTE applies the LTE predicate on the "website_url" field.
func WebsiteURLLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldWebsiteURL, v))
}

// WebsiteURLContains applies the Contains predicate on the "website_url" field.
func WebsiteURLContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldWebsiteURL, v))
}

// WebsiteURLHasPrefix applies the HasPrefix predicate on the "website_url" field.
func WebsiteURLHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldWebsiteURL, v))
}

// WebsiteURLHasSuffix applies the HasSuffix predicate on the "website_url" field.
func WebsiteURLHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldWebsiteURL, v))
}

// WebsiteURLIsNil applies the IsNil predicate on the "website_url" field.
func WebsiteURLIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldWebsiteURL))
}

// WebsiteURLNotNil applies the NotNil predicate on the "website_url" field.
func WebsiteURLNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldWebsiteURL))
}

// WebsiteURLEqualFold applies the EqualFold predicate on the "website_url" field.
func WebsiteURLEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldWebsiteURL, v))
}

// WebsiteURLContainsFold applies the ContainsFold predicate on the "website_url" field.
func WebsiteURLContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldWebsiteURL, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldPassword, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldSize, v))
}

// SizeContains applies the Contains predicate on the "size" field.
func SizeContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldSize, v))
}

// SizeHasPrefix applies the HasPrefix predicate on the "size" field.
func SizeHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldSize, v))
}

// SizeHasSuffix applies the HasSuffix predicate on the "size" field.
func SizeHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldSize, v))
}

// SizeIsNil applies the IsNil predicate on the "size" field.
func SizeIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldSize))
}

// SizeNotNil applies the NotNil predicate on the "size" field.
func SizeNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldSize))
}

// SizeEqualFold applies the EqualFold predicate on the "size" field.
func SizeEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldSize, v))
}

// SizeContainsFold applies the ContainsFold predicate on the "size" field.
func SizeContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldSize, v))
}

// IndustryEQ applies the EQ predicate on the "industry" field.
func IndustryEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldIndustry, v))
}

// IndustryNEQ applies the NEQ predicate on the "industry" field.
func IndustryNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldIndustry, v))
}

// IndustryIn applies the In predicate on the "industry" field.
func IndustryIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldIndustry, vs...))
}

// IndustryNotIn applies the NotIn predicate on the "industry" field.
func IndustryNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldIndustry, vs...))
}

// IndustryGT applies the GT predicate on the "industry" field.
func IndustryGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldIndustry, v))
}

// IndustryGTE applies the GTE predicate on the "industry" field.
func IndustryGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldIndustry, v))
}

// IndustryLT applies the LT predicate on the "industry" field.
func IndustryLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldIndustry, v))
}

// IndustryLTE applies the LTE predicate on the "industry" field.
func IndustryLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldIndustry, v))
}

// IndustryContains applies the Contains predicate on the "industry" field.
func IndustryContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldIndustry, v))
}

// IndustryHasPrefix applies the HasPrefix predicate on the "industry" field.
func IndustryHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldIndustry, v))
}

// IndustryHasSuffix applies the HasSuffix predicate on the "industry" field.
func IndustryHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldIndustry, v))
}

// IndustryIsNil applies the IsNil predicate on the "industry" field.
func IndustryIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldIndustry))
}

// IndustryNotNil applies the NotNil predicate on the "industry" field.
func IndustryNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldIndustry))
}

// IndustryEqualFold applies the EqualFold predicate on the "industry" field.
func IndustryEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldIndustry, v))
}

// IndustryContainsFold applies the ContainsFold predicate on the "industry" field.
func IndustryContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldIndustry, v))
}

// EstablishedEQ applies the EQ predicate on the "established" field.
func EstablishedEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldEstablished, v))
}

// EstablishedNEQ applies the NEQ predicate on the "established" field.
func EstablishedNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldEstablished, v))
}

// EstablishedIn applies the In predicate on the "established" field.
func EstablishedIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldEstablished, vs...))
}

// EstablishedNotIn applies the NotIn predicate on the "established" field.
func EstablishedNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldEstablished, vs...))
}

// EstablishedGT applies the GT predicate on the "established" field.
func EstablishedGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldEstablished, v))
}

// EstablishedGTE applies the GTE predicate on the "established" field.
func EstablishedGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldEstablished, v))
}

// EstablishedLT applies the LT predicate on the "established" field.
func EstablishedLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldEstablished, v))
}

// EstablishedLTE applies the LTE predicate on the "established" field.
func EstablishedLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldEstablished, v))
}

// EstablishedContains applies the Contains predicate on the "established" field.
func EstablishedContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldEstablished, v))
}

// EstablishedHasPrefix applies the HasPrefix predicate on the "established" field.
func EstablishedHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldEstablished, v))
}

// EstablishedHasSuffix applies the HasSuffix predicate on the "established" field.
func EstablishedHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldEstablished, v))
}

// EstablishedIsNil applies the IsNil predicate on the "established" field.
func EstablishedIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldEstablished))
}

// EstablishedNotNil applies the NotNil predicate on the "established" field.
func EstablishedNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldEstablished))
}

// EstablishedEqualFold applies the EqualFold predicate on the "established" field.
func EstablishedEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldEstablished, v))
}

// EstablishedContainsFold applies the ContainsFold predicate on the "established" field.
func EstablishedContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldEstablished, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldDescription, v))
}

// CultureDescriptionEQ applies the EQ predicate on the "culture_description" field.
func CultureDescriptionEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldCultureDescription, v))
}

// CultureDescriptionNEQ applies the NEQ predicate on the "culture_description" field.
func CultureDescriptionNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldCultureDescription, v))
}

// CultureDescriptionIn applies the In predicate on the "culture_description" field.
func CultureDescriptionIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldCultureDescription, vs...))
}

// CultureDescriptionNotIn applies the NotIn predicate on the "culture_description" field.
func CultureDescriptionNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldCultureDescription, vs...))
}

// CultureDescriptionGT applies the GT predicate on the "culture_description" field.
func CultureDescriptionGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldCultureDescription, v))
}

// CultureDescriptionGTE applies the GTE predicate on the "culture_description" field.
func CultureDescriptionGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldCultureDescription, v))
}

// CultureDescriptionLT applies the LT predicate on the "culture_description" field.
func CultureDescriptionLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldCultureDescription, v))
}

// CultureDescriptionLTE applies the LTE predicate on the "culture_description" field.
func CultureDescriptionLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldCultureDescription, v))
}

// CultureDescriptionContains applies the Contains predicate on the "culture_description" field.
func CultureDescriptionContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldCultureDescription, v))
}

// CultureDescriptionHasPrefix applies the HasPrefix predicate on the "culture_description" field.
func CultureDescriptionHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldCultureDescription, v))
}

// CultureDescriptionHasSuffix applies the HasSuffix predicate on the "culture_description" field.
func CultureDescriptionHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldCultureDescription, v))
}

// CultureDescriptionIsNil applies the IsNil predicate on the "culture_description" field.
func CultureDescriptionIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldCultureDescription))
}

// CultureDescriptionNotNil applies the NotNil predicate on the "culture_description" field.
func CultureDescriptionNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldCultureDescription))
}

// CultureDescriptionEqualFold applies the EqualFold predicate on the "culture_description" field.
func CultureDescriptionEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldCultureDescription, v))
}

// CultureDescriptionContainsFold applies the ContainsFold predicate on the "culture_description" field.
func CultureDescriptionContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldCultureDescription, v))
}

// HiringDescriptionEQ applies the EQ predicate on the "hiring_description" field.
func HiringDescriptionEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldEQ(FieldHiringDescription, v))
}

// HiringDescriptionNEQ applies the NEQ predicate on the "hiring_description" field.
func HiringDescriptionNEQ(v string) predicate.Company {
	return predicate.Company(sql.FieldNEQ(FieldHiringDescription, v))
}

// HiringDescriptionIn applies the In predicate on the "hiring_description" field.
func HiringDescriptionIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldIn(FieldHiringDescription, vs...))
}

// HiringDescriptionNotIn applies the NotIn predicate on the "hiring_description" field.
func HiringDescriptionNotIn(vs ...string) predicate.Company {
	return predicate.Company(sql.FieldNotIn(FieldHiringDescription, vs...))
}

// HiringDescriptionGT applies the GT predicate on the "hiring_description" field.
func HiringDescriptionGT(v string) predicate.Company {
	return predicate.Company(sql.FieldGT(FieldHiringDescription, v))
}

// HiringDescriptionGTE applies the GTE predicate on the "hiring_description" field.
func HiringDescriptionGTE(v string) predicate.Company {
	return predicate.Company(sql.FieldGTE(FieldHiringDescription, v))
}

// HiringDescriptionLT applies the LT predicate on the "hiring_description" field.
func HiringDescriptionLT(v string) predicate.Company {
	return predicate.Company(sql.FieldLT(FieldHiringDescription, v))
}

// HiringDescriptionLTE applies the LTE predicate on the "hiring_description" field.
func HiringDescriptionLTE(v string) predicate.Company {
	return predicate.Company(sql.FieldLTE(FieldHiringDescription, v))
}

// HiringDescriptionContains applies the Contains predicate on the "hiring_description" field.
func HiringDescriptionContains(v string) predicate.Company {
	return predicate.Company(sql.FieldContains(FieldHiringDescription, v))
}

// HiringDescriptionHasPrefix applies the HasPrefix predicate on the "hiring_description" field.
func HiringDescriptionHasPrefix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasPrefix(FieldHiringDescription, v))
}

// HiringDescriptionHasSuffix applies the HasSuffix predicate on the "hiring_description" field.
func HiringDescriptionHasSuffix(v string) predicate.Company {
	return predicate.Company(sql.FieldHasSuffix(FieldHiringDescription, v))
}

// HiringDescriptionIsNil applies the IsNil predicate on the "hiring_description" field.
func HiringDescriptionIsNil() predicate.Company {
	return predicate.Company(sql.FieldIsNull(FieldHiringDescription))
}

// HiringDescriptionNotNil applies the NotNil predicate on the "hiring_description" field.
func HiringDescriptionNotNil() predicate.Company {
	return predicate.Company(sql.FieldNotNull(FieldHiringDescription))
}

// HiringDescriptionEqualFold applies the EqualFold predicate on the "hiring_description" field.
func HiringDescriptionEqualFold(v string) predicate.Company {
	return predicate.Company(sql.FieldEqualFold(FieldHiringDescription, v))
}

// HiringDescriptionContainsFold applies the ContainsFold predicate on the "hiring_description" field.
func HiringDescriptionContainsFold(v string) predicate.Company {
	return predicate.Company(sql.FieldContainsFold(FieldHiringDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Company) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Company) predicate.Company {
	return predicate.Company(func(s *sql.Selector) {
		p(s.Not())
	})
}
