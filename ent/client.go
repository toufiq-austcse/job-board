// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/toufiq-austcse/go-api-boilerplate/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/company"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/job"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/jobtaxonomy"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/taxonomy"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Company is the client for interacting with the Company builders.
	Company *CompanyClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// JobTaxonomy is the client for interacting with the JobTaxonomy builders.
	JobTaxonomy *JobTaxonomyClient
	// Taxonomy is the client for interacting with the Taxonomy builders.
	Taxonomy *TaxonomyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Company = NewCompanyClient(c.config)
	c.Job = NewJobClient(c.config)
	c.JobTaxonomy = NewJobTaxonomyClient(c.config)
	c.Taxonomy = NewTaxonomyClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Company:     NewCompanyClient(cfg),
		Job:         NewJobClient(cfg),
		JobTaxonomy: NewJobTaxonomyClient(cfg),
		Taxonomy:    NewTaxonomyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Company:     NewCompanyClient(cfg),
		Job:         NewJobClient(cfg),
		JobTaxonomy: NewJobTaxonomyClient(cfg),
		Taxonomy:    NewTaxonomyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Company.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Company.Use(hooks...)
	c.Job.Use(hooks...)
	c.JobTaxonomy.Use(hooks...)
	c.Taxonomy.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Company.Intercept(interceptors...)
	c.Job.Intercept(interceptors...)
	c.JobTaxonomy.Intercept(interceptors...)
	c.Taxonomy.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CompanyMutation:
		return c.Company.mutate(ctx, m)
	case *JobMutation:
		return c.Job.mutate(ctx, m)
	case *JobTaxonomyMutation:
		return c.JobTaxonomy.mutate(ctx, m)
	case *TaxonomyMutation:
		return c.Taxonomy.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CompanyClient is a client for the Company schema.
type CompanyClient struct {
	config
}

// NewCompanyClient returns a client for the Company from the given config.
func NewCompanyClient(c config) *CompanyClient {
	return &CompanyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `company.Hooks(f(g(h())))`.
func (c *CompanyClient) Use(hooks ...Hook) {
	c.hooks.Company = append(c.hooks.Company, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `company.Intercept(f(g(h())))`.
func (c *CompanyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Company = append(c.inters.Company, interceptors...)
}

// Create returns a builder for creating a Company entity.
func (c *CompanyClient) Create() *CompanyCreate {
	mutation := newCompanyMutation(c.config, OpCreate)
	return &CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Company entities.
func (c *CompanyClient) CreateBulk(builders ...*CompanyCreate) *CompanyCreateBulk {
	return &CompanyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Company.
func (c *CompanyClient) Update() *CompanyUpdate {
	mutation := newCompanyMutation(c.config, OpUpdate)
	return &CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyClient) UpdateOne(co *Company) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompany(co))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyClient) UpdateOneID(id int) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompanyID(id))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Company.
func (c *CompanyClient) Delete() *CompanyDelete {
	mutation := newCompanyMutation(c.config, OpDelete)
	return &CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompanyClient) DeleteOne(co *Company) *CompanyDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompanyClient) DeleteOneID(id int) *CompanyDeleteOne {
	builder := c.Delete().Where(company.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDeleteOne{builder}
}

// Query returns a query builder for Company.
func (c *CompanyClient) Query() *CompanyQuery {
	return &CompanyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompany},
		inters: c.Interceptors(),
	}
}

// Get returns a Company entity by its id.
func (c *CompanyClient) Get(ctx context.Context, id int) (*Company, error) {
	return c.Query().Where(company.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyClient) GetX(ctx context.Context, id int) *Company {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CompanyClient) Hooks() []Hook {
	hooks := c.hooks.Company
	return append(hooks[:len(hooks):len(hooks)], company.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CompanyClient) Interceptors() []Interceptor {
	return c.inters.Company
}

func (c *CompanyClient) mutate(ctx context.Context, m *CompanyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Company mutation op: %q", m.Op())
	}
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `job.Intercept(f(g(h())))`.
func (c *JobClient) Intercept(interceptors ...Interceptor) {
	c.inters.Job = append(c.inters.Job, interceptors...)
}

// Create returns a builder for creating a Job entity.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(j *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(j))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id int) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobClient) DeleteOne(j *Job) *JobDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobClient) DeleteOneID(id int) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJob},
		inters: c.Interceptors(),
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id int) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id int) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	hooks := c.hooks.Job
	return append(hooks[:len(hooks):len(hooks)], job.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *JobClient) Interceptors() []Interceptor {
	return c.inters.Job
}

func (c *JobClient) mutate(ctx context.Context, m *JobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Job mutation op: %q", m.Op())
	}
}

// JobTaxonomyClient is a client for the JobTaxonomy schema.
type JobTaxonomyClient struct {
	config
}

// NewJobTaxonomyClient returns a client for the JobTaxonomy from the given config.
func NewJobTaxonomyClient(c config) *JobTaxonomyClient {
	return &JobTaxonomyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobtaxonomy.Hooks(f(g(h())))`.
func (c *JobTaxonomyClient) Use(hooks ...Hook) {
	c.hooks.JobTaxonomy = append(c.hooks.JobTaxonomy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobtaxonomy.Intercept(f(g(h())))`.
func (c *JobTaxonomyClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobTaxonomy = append(c.inters.JobTaxonomy, interceptors...)
}

// Create returns a builder for creating a JobTaxonomy entity.
func (c *JobTaxonomyClient) Create() *JobTaxonomyCreate {
	mutation := newJobTaxonomyMutation(c.config, OpCreate)
	return &JobTaxonomyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobTaxonomy entities.
func (c *JobTaxonomyClient) CreateBulk(builders ...*JobTaxonomyCreate) *JobTaxonomyCreateBulk {
	return &JobTaxonomyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobTaxonomy.
func (c *JobTaxonomyClient) Update() *JobTaxonomyUpdate {
	mutation := newJobTaxonomyMutation(c.config, OpUpdate)
	return &JobTaxonomyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobTaxonomyClient) UpdateOne(jt *JobTaxonomy) *JobTaxonomyUpdateOne {
	mutation := newJobTaxonomyMutation(c.config, OpUpdateOne, withJobTaxonomy(jt))
	return &JobTaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobTaxonomyClient) UpdateOneID(id int) *JobTaxonomyUpdateOne {
	mutation := newJobTaxonomyMutation(c.config, OpUpdateOne, withJobTaxonomyID(id))
	return &JobTaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobTaxonomy.
func (c *JobTaxonomyClient) Delete() *JobTaxonomyDelete {
	mutation := newJobTaxonomyMutation(c.config, OpDelete)
	return &JobTaxonomyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobTaxonomyClient) DeleteOne(jt *JobTaxonomy) *JobTaxonomyDeleteOne {
	return c.DeleteOneID(jt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobTaxonomyClient) DeleteOneID(id int) *JobTaxonomyDeleteOne {
	builder := c.Delete().Where(jobtaxonomy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobTaxonomyDeleteOne{builder}
}

// Query returns a query builder for JobTaxonomy.
func (c *JobTaxonomyClient) Query() *JobTaxonomyQuery {
	return &JobTaxonomyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobTaxonomy},
		inters: c.Interceptors(),
	}
}

// Get returns a JobTaxonomy entity by its id.
func (c *JobTaxonomyClient) Get(ctx context.Context, id int) (*JobTaxonomy, error) {
	return c.Query().Where(jobtaxonomy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobTaxonomyClient) GetX(ctx context.Context, id int) *JobTaxonomy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JobTaxonomyClient) Hooks() []Hook {
	return c.hooks.JobTaxonomy
}

// Interceptors returns the client interceptors.
func (c *JobTaxonomyClient) Interceptors() []Interceptor {
	return c.inters.JobTaxonomy
}

func (c *JobTaxonomyClient) mutate(ctx context.Context, m *JobTaxonomyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobTaxonomyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobTaxonomyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobTaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobTaxonomyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobTaxonomy mutation op: %q", m.Op())
	}
}

// TaxonomyClient is a client for the Taxonomy schema.
type TaxonomyClient struct {
	config
}

// NewTaxonomyClient returns a client for the Taxonomy from the given config.
func NewTaxonomyClient(c config) *TaxonomyClient {
	return &TaxonomyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taxonomy.Hooks(f(g(h())))`.
func (c *TaxonomyClient) Use(hooks ...Hook) {
	c.hooks.Taxonomy = append(c.hooks.Taxonomy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `taxonomy.Intercept(f(g(h())))`.
func (c *TaxonomyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Taxonomy = append(c.inters.Taxonomy, interceptors...)
}

// Create returns a builder for creating a Taxonomy entity.
func (c *TaxonomyClient) Create() *TaxonomyCreate {
	mutation := newTaxonomyMutation(c.config, OpCreate)
	return &TaxonomyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Taxonomy entities.
func (c *TaxonomyClient) CreateBulk(builders ...*TaxonomyCreate) *TaxonomyCreateBulk {
	return &TaxonomyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Taxonomy.
func (c *TaxonomyClient) Update() *TaxonomyUpdate {
	mutation := newTaxonomyMutation(c.config, OpUpdate)
	return &TaxonomyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaxonomyClient) UpdateOne(t *Taxonomy) *TaxonomyUpdateOne {
	mutation := newTaxonomyMutation(c.config, OpUpdateOne, withTaxonomy(t))
	return &TaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaxonomyClient) UpdateOneID(id int) *TaxonomyUpdateOne {
	mutation := newTaxonomyMutation(c.config, OpUpdateOne, withTaxonomyID(id))
	return &TaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Taxonomy.
func (c *TaxonomyClient) Delete() *TaxonomyDelete {
	mutation := newTaxonomyMutation(c.config, OpDelete)
	return &TaxonomyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaxonomyClient) DeleteOne(t *Taxonomy) *TaxonomyDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaxonomyClient) DeleteOneID(id int) *TaxonomyDeleteOne {
	builder := c.Delete().Where(taxonomy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaxonomyDeleteOne{builder}
}

// Query returns a query builder for Taxonomy.
func (c *TaxonomyClient) Query() *TaxonomyQuery {
	return &TaxonomyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaxonomy},
		inters: c.Interceptors(),
	}
}

// Get returns a Taxonomy entity by its id.
func (c *TaxonomyClient) Get(ctx context.Context, id int) (*Taxonomy, error) {
	return c.Query().Where(taxonomy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaxonomyClient) GetX(ctx context.Context, id int) *Taxonomy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaxonomyClient) Hooks() []Hook {
	return c.hooks.Taxonomy
}

// Interceptors returns the client interceptors.
func (c *TaxonomyClient) Interceptors() []Interceptor {
	return c.inters.Taxonomy
}

func (c *TaxonomyClient) mutate(ctx context.Context, m *TaxonomyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaxonomyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaxonomyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaxonomyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaxonomyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Taxonomy mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Company, Job, JobTaxonomy, Taxonomy []ent.Hook
	}
	inters struct {
		Company, Job, JobTaxonomy, Taxonomy []ent.Interceptor
	}
)
