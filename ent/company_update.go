// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/company"
	"github.com/toufiq-austcse/go-api-boilerplate/ent/predicate"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CompanyUpdate) SetUpdatedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetSlug sets the "slug" field.
func (cu *CompanyUpdate) SetSlug(s string) *CompanyUpdate {
	cu.mutation.SetSlug(s)
	return cu
}

// SetLocation sets the "location" field.
func (cu *CompanyUpdate) SetLocation(s string) *CompanyUpdate {
	cu.mutation.SetLocation(s)
	return cu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLocation(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetLocation(*s)
	}
	return cu
}

// ClearLocation clears the value of the "location" field.
func (cu *CompanyUpdate) ClearLocation() *CompanyUpdate {
	cu.mutation.ClearLocation()
	return cu
}

// SetLogoURL sets the "logo_url" field.
func (cu *CompanyUpdate) SetLogoURL(s string) *CompanyUpdate {
	cu.mutation.SetLogoURL(s)
	return cu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLogoURL(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetLogoURL(*s)
	}
	return cu
}

// ClearLogoURL clears the value of the "logo_url" field.
func (cu *CompanyUpdate) ClearLogoURL() *CompanyUpdate {
	cu.mutation.ClearLogoURL()
	return cu
}

// SetWebsiteURL sets the "website_url" field.
func (cu *CompanyUpdate) SetWebsiteURL(s string) *CompanyUpdate {
	cu.mutation.SetWebsiteURL(s)
	return cu
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableWebsiteURL(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetWebsiteURL(*s)
	}
	return cu
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (cu *CompanyUpdate) ClearWebsiteURL() *CompanyUpdate {
	cu.mutation.ClearWebsiteURL()
	return cu
}

// SetEmail sets the "email" field.
func (cu *CompanyUpdate) SetEmail(s string) *CompanyUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetPassword sets the "password" field.
func (cu *CompanyUpdate) SetPassword(s string) *CompanyUpdate {
	cu.mutation.SetPassword(s)
	return cu
}

// SetSize sets the "size" field.
func (cu *CompanyUpdate) SetSize(s string) *CompanyUpdate {
	cu.mutation.SetSize(s)
	return cu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableSize(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetSize(*s)
	}
	return cu
}

// ClearSize clears the value of the "size" field.
func (cu *CompanyUpdate) ClearSize() *CompanyUpdate {
	cu.mutation.ClearSize()
	return cu
}

// SetIndustry sets the "industry" field.
func (cu *CompanyUpdate) SetIndustry(s string) *CompanyUpdate {
	cu.mutation.SetIndustry(s)
	return cu
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableIndustry(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetIndustry(*s)
	}
	return cu
}

// ClearIndustry clears the value of the "industry" field.
func (cu *CompanyUpdate) ClearIndustry() *CompanyUpdate {
	cu.mutation.ClearIndustry()
	return cu
}

// SetEstablished sets the "established" field.
func (cu *CompanyUpdate) SetEstablished(s string) *CompanyUpdate {
	cu.mutation.SetEstablished(s)
	return cu
}

// SetNillableEstablished sets the "established" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableEstablished(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetEstablished(*s)
	}
	return cu
}

// ClearEstablished clears the value of the "established" field.
func (cu *CompanyUpdate) ClearEstablished() *CompanyUpdate {
	cu.mutation.ClearEstablished()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CompanyUpdate) SetDescription(s string) *CompanyUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableDescription(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CompanyUpdate) ClearDescription() *CompanyUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetCultureDescription sets the "culture_description" field.
func (cu *CompanyUpdate) SetCultureDescription(s string) *CompanyUpdate {
	cu.mutation.SetCultureDescription(s)
	return cu
}

// SetNillableCultureDescription sets the "culture_description" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCultureDescription(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetCultureDescription(*s)
	}
	return cu
}

// ClearCultureDescription clears the value of the "culture_description" field.
func (cu *CompanyUpdate) ClearCultureDescription() *CompanyUpdate {
	cu.mutation.ClearCultureDescription()
	return cu
}

// SetHiringDescription sets the "hiring_description" field.
func (cu *CompanyUpdate) SetHiringDescription(s string) *CompanyUpdate {
	cu.mutation.SetHiringDescription(s)
	return cu
}

// SetNillableHiringDescription sets the "hiring_description" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableHiringDescription(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetHiringDescription(*s)
	}
	return cu
}

// ClearHiringDescription clears the value of the "hiring_description" field.
func (cu *CompanyUpdate) ClearHiringDescription() *CompanyUpdate {
	cu.mutation.ClearHiringDescription()
	return cu
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompanyUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if company.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized company.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := company.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Slug(); ok {
		if err := company.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Company.slug": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Slug(); ok {
		_spec.SetField(company.FieldSlug, field.TypeString, value)
	}
	if value, ok := cu.mutation.Location(); ok {
		_spec.SetField(company.FieldLocation, field.TypeString, value)
	}
	if cu.mutation.LocationCleared() {
		_spec.ClearField(company.FieldLocation, field.TypeString)
	}
	if value, ok := cu.mutation.LogoURL(); ok {
		_spec.SetField(company.FieldLogoURL, field.TypeString, value)
	}
	if cu.mutation.LogoURLCleared() {
		_spec.ClearField(company.FieldLogoURL, field.TypeString)
	}
	if value, ok := cu.mutation.WebsiteURL(); ok {
		_spec.SetField(company.FieldWebsiteURL, field.TypeString, value)
	}
	if cu.mutation.WebsiteURLCleared() {
		_spec.ClearField(company.FieldWebsiteURL, field.TypeString)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Password(); ok {
		_spec.SetField(company.FieldPassword, field.TypeString, value)
	}
	if value, ok := cu.mutation.Size(); ok {
		_spec.SetField(company.FieldSize, field.TypeString, value)
	}
	if cu.mutation.SizeCleared() {
		_spec.ClearField(company.FieldSize, field.TypeString)
	}
	if value, ok := cu.mutation.Industry(); ok {
		_spec.SetField(company.FieldIndustry, field.TypeString, value)
	}
	if cu.mutation.IndustryCleared() {
		_spec.ClearField(company.FieldIndustry, field.TypeString)
	}
	if value, ok := cu.mutation.Established(); ok {
		_spec.SetField(company.FieldEstablished, field.TypeString, value)
	}
	if cu.mutation.EstablishedCleared() {
		_spec.ClearField(company.FieldEstablished, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(company.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.CultureDescription(); ok {
		_spec.SetField(company.FieldCultureDescription, field.TypeString, value)
	}
	if cu.mutation.CultureDescriptionCleared() {
		_spec.ClearField(company.FieldCultureDescription, field.TypeString)
	}
	if value, ok := cu.mutation.HiringDescription(); ok {
		_spec.SetField(company.FieldHiringDescription, field.TypeString, value)
	}
	if cu.mutation.HiringDescriptionCleared() {
		_spec.ClearField(company.FieldHiringDescription, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CompanyUpdateOne) SetUpdatedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetSlug sets the "slug" field.
func (cuo *CompanyUpdateOne) SetSlug(s string) *CompanyUpdateOne {
	cuo.mutation.SetSlug(s)
	return cuo
}

// SetLocation sets the "location" field.
func (cuo *CompanyUpdateOne) SetLocation(s string) *CompanyUpdateOne {
	cuo.mutation.SetLocation(s)
	return cuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLocation(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetLocation(*s)
	}
	return cuo
}

// ClearLocation clears the value of the "location" field.
func (cuo *CompanyUpdateOne) ClearLocation() *CompanyUpdateOne {
	cuo.mutation.ClearLocation()
	return cuo
}

// SetLogoURL sets the "logo_url" field.
func (cuo *CompanyUpdateOne) SetLogoURL(s string) *CompanyUpdateOne {
	cuo.mutation.SetLogoURL(s)
	return cuo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLogoURL(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetLogoURL(*s)
	}
	return cuo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (cuo *CompanyUpdateOne) ClearLogoURL() *CompanyUpdateOne {
	cuo.mutation.ClearLogoURL()
	return cuo
}

// SetWebsiteURL sets the "website_url" field.
func (cuo *CompanyUpdateOne) SetWebsiteURL(s string) *CompanyUpdateOne {
	cuo.mutation.SetWebsiteURL(s)
	return cuo
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableWebsiteURL(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetWebsiteURL(*s)
	}
	return cuo
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (cuo *CompanyUpdateOne) ClearWebsiteURL() *CompanyUpdateOne {
	cuo.mutation.ClearWebsiteURL()
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CompanyUpdateOne) SetEmail(s string) *CompanyUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetPassword sets the "password" field.
func (cuo *CompanyUpdateOne) SetPassword(s string) *CompanyUpdateOne {
	cuo.mutation.SetPassword(s)
	return cuo
}

// SetSize sets the "size" field.
func (cuo *CompanyUpdateOne) SetSize(s string) *CompanyUpdateOne {
	cuo.mutation.SetSize(s)
	return cuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableSize(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetSize(*s)
	}
	return cuo
}

// ClearSize clears the value of the "size" field.
func (cuo *CompanyUpdateOne) ClearSize() *CompanyUpdateOne {
	cuo.mutation.ClearSize()
	return cuo
}

// SetIndustry sets the "industry" field.
func (cuo *CompanyUpdateOne) SetIndustry(s string) *CompanyUpdateOne {
	cuo.mutation.SetIndustry(s)
	return cuo
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableIndustry(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetIndustry(*s)
	}
	return cuo
}

// ClearIndustry clears the value of the "industry" field.
func (cuo *CompanyUpdateOne) ClearIndustry() *CompanyUpdateOne {
	cuo.mutation.ClearIndustry()
	return cuo
}

// SetEstablished sets the "established" field.
func (cuo *CompanyUpdateOne) SetEstablished(s string) *CompanyUpdateOne {
	cuo.mutation.SetEstablished(s)
	return cuo
}

// SetNillableEstablished sets the "established" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableEstablished(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetEstablished(*s)
	}
	return cuo
}

// ClearEstablished clears the value of the "established" field.
func (cuo *CompanyUpdateOne) ClearEstablished() *CompanyUpdateOne {
	cuo.mutation.ClearEstablished()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CompanyUpdateOne) SetDescription(s string) *CompanyUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableDescription(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CompanyUpdateOne) ClearDescription() *CompanyUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetCultureDescription sets the "culture_description" field.
func (cuo *CompanyUpdateOne) SetCultureDescription(s string) *CompanyUpdateOne {
	cuo.mutation.SetCultureDescription(s)
	return cuo
}

// SetNillableCultureDescription sets the "culture_description" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCultureDescription(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetCultureDescription(*s)
	}
	return cuo
}

// ClearCultureDescription clears the value of the "culture_description" field.
func (cuo *CompanyUpdateOne) ClearCultureDescription() *CompanyUpdateOne {
	cuo.mutation.ClearCultureDescription()
	return cuo
}

// SetHiringDescription sets the "hiring_description" field.
func (cuo *CompanyUpdateOne) SetHiringDescription(s string) *CompanyUpdateOne {
	cuo.mutation.SetHiringDescription(s)
	return cuo
}

// SetNillableHiringDescription sets the "hiring_description" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableHiringDescription(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetHiringDescription(*s)
	}
	return cuo
}

// ClearHiringDescription clears the value of the "hiring_description" field.
func (cuo *CompanyUpdateOne) ClearHiringDescription() *CompanyUpdateOne {
	cuo.mutation.ClearHiringDescription()
	return cuo
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompanyUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if company.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized company.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := company.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Slug(); ok {
		if err := company.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Company.slug": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Slug(); ok {
		_spec.SetField(company.FieldSlug, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Location(); ok {
		_spec.SetField(company.FieldLocation, field.TypeString, value)
	}
	if cuo.mutation.LocationCleared() {
		_spec.ClearField(company.FieldLocation, field.TypeString)
	}
	if value, ok := cuo.mutation.LogoURL(); ok {
		_spec.SetField(company.FieldLogoURL, field.TypeString, value)
	}
	if cuo.mutation.LogoURLCleared() {
		_spec.ClearField(company.FieldLogoURL, field.TypeString)
	}
	if value, ok := cuo.mutation.WebsiteURL(); ok {
		_spec.SetField(company.FieldWebsiteURL, field.TypeString, value)
	}
	if cuo.mutation.WebsiteURLCleared() {
		_spec.ClearField(company.FieldWebsiteURL, field.TypeString)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(company.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Password(); ok {
		_spec.SetField(company.FieldPassword, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Size(); ok {
		_spec.SetField(company.FieldSize, field.TypeString, value)
	}
	if cuo.mutation.SizeCleared() {
		_spec.ClearField(company.FieldSize, field.TypeString)
	}
	if value, ok := cuo.mutation.Industry(); ok {
		_spec.SetField(company.FieldIndustry, field.TypeString, value)
	}
	if cuo.mutation.IndustryCleared() {
		_spec.ClearField(company.FieldIndustry, field.TypeString)
	}
	if value, ok := cuo.mutation.Established(); ok {
		_spec.SetField(company.FieldEstablished, field.TypeString, value)
	}
	if cuo.mutation.EstablishedCleared() {
		_spec.ClearField(company.FieldEstablished, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(company.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(company.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.CultureDescription(); ok {
		_spec.SetField(company.FieldCultureDescription, field.TypeString, value)
	}
	if cuo.mutation.CultureDescriptionCleared() {
		_spec.ClearField(company.FieldCultureDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.HiringDescription(); ok {
		_spec.SetField(company.FieldHiringDescription, field.TypeString, value)
	}
	if cuo.mutation.HiringDescriptionCleared() {
		_spec.ClearField(company.FieldHiringDescription, field.TypeString)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
